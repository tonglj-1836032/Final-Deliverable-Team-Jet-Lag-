stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
install.packages(hexbin)
install(hexbin)
install.packages("hexbin")
library(hexbin)
library(ggplot2)
library(dplyr)
library(ggplot2)
library(dplyr)
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
colnames(diamonds)
nrow(diamonds)
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(diamonds,1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
ssample_n(1000)
diamonds_sample <- diamonds %>%
sample_n(1000)
diamonds_sample <- diamonds %>%
slice_sample(n = 1000)
dim(diamonds_sample)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(data = diamonds_sample)
ggplot(data = diamonds_sample) +
geom_point(aes(x = carat, y = price))
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, col(clarity)))
# clarity.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, col = clarity))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, col = price),
alpha = .1)
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price),
col = "blue")
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price),
col = "blue")
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, shape = cut))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price))
install.packages("RColorBrewer")
library(RColorBrewer)
install.packages("shiny")
library("shiny")
install.packages("rsconnect")
source("script/chart_2.R")
# Load the `shiny` package (install it in the R terminal if you haven't already)
library("shiny")
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-1')
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-1')
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-1')
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-1')
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-1')
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-1')
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-1')
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-1')
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-1')
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-1')
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-1')
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-1')
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-1')
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-1')
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-1')
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-1')
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-1')
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-1')
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-1')
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-1')
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-1')
server <- function(input, output) {
# Will be next!
}
shinyApp(ui = ui, server = server)
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-1')
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-1')
# Load the `shiny` package (install it in the R terminal if you haven't already)
library("shiny")
# This defines a server that doesn't do anything yet, but is needed to run the app.
server <- function(input, output) {
# Will be next!
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
server <- function(input, output) {
# Will be next!
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
ui <- fluidPage(
h1("First Shiny Website"),
p("This is my", strong("first"),"Shiny project, and I feel..."),
img(scr = "https://media2.giphy.com/media/olmyX3Ns0nk4M/giphy.gif"),
p("I can't wait to get", em("sliders"),"like this to work"),
sliderInput(
InputId = "my_slider",
label = "my first slider",
min = 10,
max = 100,
value = 50,
step = 10
)
)
(ui = ui
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
# Load the `shiny` package (install it in the R terminal if you haven't already)
library("shiny")
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
server = server
server <- function(input, output) {
# Will be next!
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
server <- function(input, output) {
# Will be next!
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
# Load the `shiny` package (install it in the R terminal if you haven't already)
library("shiny")
# Load the `shiny` package (install it in the R terminal if you haven't already)
library(shiny)
shinyApp(ui = ui, server = server)
# Load the `shiny` package (install it in the R terminal if you haven't already)
library(shiny)
# Load the `shiny` package (install it in the R terminal if you haven't already)
library(shiny)
server <- function(input, output) {
# Will be next!
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-1')
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-1')
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-1')
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-1')
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-1')
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-1')
shinyApp(ui = ui, server = server)
# Load the `shiny` package
library(shiny)
ui <- fluidPage(
titlePanel("Cost Calculator")
)
server <- function(input, output){}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
h1("First Shiny Website"),
p("This is my", strong("first"),"Shiny project, and I feel..."),
img(scr = "https://media2.giphy.com/media/olmyX3Ns0nk4M/giphy.gif"),
p("I can't wait to get", em("sliders"),"like this to work"),
sliderInput(
InputId = "my_slider",
label = "my first slider",
min = 10,
max = 100,
value = 50,
step = 10
),
textOutput(outputId = "slider_description")
)
ui <- fluidPage(
h1("First Shiny Website"),
p("This is my", strong("first"),"Shiny project, and I feel..."),
img(scr = "https://media2.giphy.com/media/olmyX3Ns0nk4M/giphy.gif"),
p("I can't wait to get", em("sliders"),"like this to work"),
sliderInput(
InputId = my_slider,
label = "my first slider",
min = 10,
max = 100,
value = 50,
step = 10
),
textOutput(outputId = "slider_description")
)
ui <- fluidPage(
h1("First Shiny Website"),
p("This is my", strong("first"),"Shiny project, and I feel..."),
img(scr = "https://media2.giphy.com/media/olmyX3Ns0nk4M/giphy.gif"),
p("I can't wait to get", em("sliders"),"like this to work"),
sliderInput(
inputId = “my_slider”,
label = "my first slider",
min = 10,
max = 100,
value = 50,
step = 10
),
textOutput(outputId = "slider_description")
)
ui <- fluidPage(
h1("First Shiny Website"),
p("This is my", strong("first"),"Shiny project, and I feel..."),
img(scr = "https://media2.giphy.com/media/olmyX3Ns0nk4M/giphy.gif"),
p("I can't wait to get", em("sliders"),"like this to work"),
sliderInput(
inputId = "my_slider",
label = "my first slider",
min = 10,
max = 100,
value = 50,
step = 10
),
textOutput(outputId = "slider_description")
)
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-1')
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-2')
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-2')
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-2')
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-2')
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-2')
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-2')
library("shiny")
library("ggplot2")
library("dplyr")
# You will again be working with the `diamonds` data set provided by ggplot2
# Use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- sample_n(diamonds, 1000)
# You will again be working with the `diamonds` data set provided by ggplot2
# Use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- sample_n(diamonds, 1000)
library("shiny")
library("ggplot2")
library("dplyr")
# You will again be working with the `diamonds` data set provided by ggplot2
# Use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- sample_n(diamonds, 1000)
# You will again be working with the `diamonds` data set provided by ggplot2
# Use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- sample_n(diamonds, 1000)
# Load the shiny, ggplot2, and dplyr libraries
library("shiny")
library("ggplot2")
library("dplyr")
# You will again be working with the `diamonds` data set provided by ggplot2
# Use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- sample_n(diamonds, 1000)
# For convenience store the `range()` of values for the `price` column
# (of your sample)
price_range <- range(diamonds_sample$price)
# For convenience, get a vector of column names from the `diamonds` data set to
# use as select inputs
col_names <- colnames(diamonds_sample)
feature_input <- selectInput(
inputId = "feature",
label = "Select a feature",
choices = col_names,
selected = "carat"
)
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-3')
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-3')
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-3')
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-3')
runApp('Desktop/INFO_201/exercises-xxiaouw/chapter-19-exercises/exercise-3')
shiny::runApp('Desktop/INFO_201/a4-xxiaouw')
runApp('Desktop/INFO_201/a4-xxiaouw')
runApp('Desktop/INFO_201/a4-xxiaouw')
runApp('Desktop/INFO_201/a4-xxiaouw')
runApp('Desktop/INFO_201/a4-xxiaouw')
runApp('Desktop/INFO_201/a4-xxiaouw')
runApp('Desktop/INFO_201/a4-xxiaouw')
runApp('Desktop/INFO_201/a4-xxiaouw')
runApp('Desktop/INFO_201/a4-xxiaouw')
runApp('Desktop/INFO_201/a4-xxiaouw')
runApp('Desktop/INFO_201/a4-xxiaouw')
runApp('Desktop/INFO_201/a4-xxiaouw')
data_50 %>%
select(country, year, energy_prop, coal_energy_prop,
gas_energy_prop, oil_energy_prop) %>%
gather(key = EnergyType, value = proportion, 3:6)
plot_data[plot_data=="energy_prop"]<-"Energy Proportion"
plot_data[plot_data=="coal_energy_prop"]<-"Coal Energy Proportion"
plot_data[plot_data=="gas_energy_prop"]<-"Gas Energy Proportion"
plot_data[plot_data=="oil_energy_prop"]<-"Oil Energy Proportion"
plot_data <- data_50 %>%
select(country, year, energy_prop, coal_energy_prop,
gas_energy_prop, oil_energy_prop) %>%
gather(key = EnergyType, value = proportion, 3:6)
plot_data[plot_data=="energy_prop"]<-"Energy Proportion"
plot_data[plot_data=="coal_energy_prop"]<-"Coal Energy Proportion"
plot_data[plot_data=="gas_energy_prop"]<-"Gas Energy Proportion"
plot_data[plot_data=="oil_energy_prop"]<-"Oil Energy Proportion"
plot_data <- data_50 %>%
select(country, year, energy_prop, coal_energy_prop,
gas_energy_prop, oil_energy_prop) %>%
gather(key = EnergyType, value = proportion, 3:6)
plot_data[plot_data=="energy_prop"]<-"Energy Proportion"
plot_data[plot_data=="coal_energy_prop"]<-"Coal Energy Proportion"
plot_data[plot_data=="gas_energy_prop"]<-"Gas Energy Proportion"
plot_data[plot_data=="oil_energy_prop"]<-"Oil Energy Proportion"
plot_data <- data_50 %>%
select(country, year, energy_prop, coal_energy_prop,
gas_energy_prop, oil_energy_prop) %>%
gather(key = EnergyType, value = proportion, 3:6)
plot_data[plot_data=="energy_prop"]<-"Energy Proportion"
plot_data[plot_data=="coal_energy_prop"]<-"Coal Energy Proportion"
plot_data[plot_data=="gas_energy_prop"]<-"Gas Energy Proportion"
plot_data[plot_data=="oil_energy_prop"]<-"Oil Energy Proportion"
plot_data <- data_50 %>%
select(country, year, energy_prop, coal_energy_prop,
gas_energy_prop, oil_energy_prop) %>%
gather(key = EnergyType, value = proportion, 3:6)
plot_data[plot_data=="energy_prop"]<-"Energy Proportion"
plot_data[plot_data=="coal_energy_prop"]<-"Coal Energy Proportion"
plot_data[plot_data=="gas_energy_prop"]<-"Gas Energy Proportion"
plot_data[plot_data=="oil_energy_prop"]<-"Oil Energy Proportion"
runApp('Desktop/INFO_201/a4-xxiaouw')
runApp('Desktop/INFO_201/a4-xxiaouw')
runApp('Desktop/INFO_201/a4-xxiaouw')
plot_data <- data_50 %>%
select(country, year, energy_prop, coal_energy_prop,
gas_energy_prop, oil_energy_prop) %>%
gather(key = EnergyType, value = proportion, 3:6)
plot_data[plot_data=="energy_prop"]<-"All Nonrenewable Energy Proportion"
plot_data[plot_data=="coal_energy_prop"]<-"Coal Energy Proportion"
plot_data[plot_data=="gas_energy_prop"]<-"Gas Energy Proportion"
plot_data[plot_data=="oil_energy_prop"]<-"Oil Energy Proportion"
runApp('Desktop/INFO_201/a4-xxiaouw')
runApp('Desktop/INFO_201/a4-xxiaouw')
runApp('Desktop/INFO_201/a4-xxiaouw')
setwd("~/Desktop/INFO_201/Group_project/Final-Deliverable-Team-Jet-Lag-")
shiny::runApp()
runApp()
data_raw <- read.csv("./data/COVID-19_Case_Surveillance_Public_Use_Data.csv")
runApp()
View(data_raw)
setwd("~/Desktop/INFO_201/Group_project/Final-Deliverable-Team-Jet-Lag-")
data_raw <- read.csv("./data/COVID-19_Case_Surveillance_Public_Use_Data.csv")
data <- data_raw %>%
filter(hosp_yn != "Unknown") %>%
filter(hosp_yn != "Missing") %>%
select(sex,age_group,Race.and.ethnicity..combined., hosp_yn) %>%
filter(Race.and.ethnicity..combined. != "Unknown")
hosp_by_race_y <- data %>%
group_by(Race.and.ethnicity..combined.) %>%
filter(hosp_yn == "Yes") %>%
summarize(sum_y = n())
hosp_by_race_sum <- data %>%
group_by(Race.and.ethnicity..combined.) %>%
summarize(sum = n())
plot_data <- left_join(hosp_by_race_y, hosp_by_race_sum,
by = "Race.and.ethnicity..combined."
) %>%
mutate(y_rate = sum_y / sum) %>%
select(Race.and.ethnicity..combined., y_rate)
View(data_raw)
race_list <- data %>%
select(Race.and.ethnicity..combined.) %>%
unique()
View(race_list)
race_list <- as.list(
data %>%
select(Race.and.ethnicity..combined.) %>%
unique()
)
View(race_list)
runApp()
View(data_raw)
View(data_raw)
View(data_raw)
View(data_raw)
runApp()
runApp()
runApp()
runApp()
race_sex_y <- data %>%
group_by(Race.and.ethnicity..combined.,sex) %>%
filter(hosp_yn == "Yes") %>%
summarize(sex_sum_y = n())
race_sex_sum <- data %>%
group_by(Race.and.ethnicity..combined.,sex) %>%
summarize(sex_sum = n())
View(race_sex_y)
View(race_sex_sum)
data_race_sex <- data %>%
group_by(Race.and.ethnicity..combined.,sex)%>%
summarize(sex_sum = n()) %>%
mutate(sex_sum_y = n(filter(hosp_yn == "Yes")) %>%
summarize(y_rate_sex = sex_sum_y/sex_sum)
data_race_sex <- data %>%
group_by(Race.and.ethnicity..combined.,sex)%>%
summarize(sex_sum = n()) %>%
mutate(sex_sum_y = n(filter(hosp_yn == "Yes")) %>%
summarize(y_rate_sex = sex_sum_y/sex_sum)
group_by(Race.and.ethnicity..combined.,sex)%>%
summarize(sex_sum = n()) %>%
mutate(sex_sum_y = n(filter(hosp_yn == "Yes")) %>%
summarize(y_rate_sex = sex_sum_y/sex_sum)
library("shiny")
library("ggplot2")
library("dplyr")
library("plotly")
library("tidyverse")
data_race_sex <- data %>%
group_by(Race.and.ethnicity..combined.,sex) %>%
summarize(sex_sum = n()) %>%
mutate(sex_sum_y = n(filter(hosp_yn == "Yes")) %>%
summarize(y_rate_sex = sex_sum_y/sex_sum)
